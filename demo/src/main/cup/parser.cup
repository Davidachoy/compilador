package com.compiler;
import java.util.List;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.LinkedList;

class Parser;

parser code {:
    // define the symbol table
       private SymbolTable symbolTable = new SymbolTable();

       public void report_error(String message, Object info) {
              StringBuilder m = new StringBuilder("Error de sintaxis");
              if (info instanceof java_cup.runtime.Symbol) {
              java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
              if (s.left >= 0) {
                     m.append(" en la línea "+ (s.left+1));
                     if (s.right >= 0)
                     m.append(", columna "+ (s.right+1));
              }
              m.append(": "+message);
              }
              System.err.println(m);
       }

:};



/** simbolos terminales **/

terminal             IF, ELSE, WHILE, FOR, INT, RETURN, FLOAT, BOOL, CHAR, STRING, ELIF, DO, READ, PRINT, MAIN, TRUE, BREAK, FALSE;
terminal             SEMICOLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;
terminal             PLUS, MINUS, MUL, DIV, EQ, EQEQ, LESS_THAN, LESS_THAN_EQUAL, GREATER_THAN, GREATER_THAN_EQUAL, NOT_EQUAL, AND, OR;
terminal             INCREMENT, DECREMENT, POWER, MODULO, DOLAR, NOT;
terminal             IDENTIFIER, INTEGER_LITERAL, FLOAT_LITERAL, CHAR_LITERAL, STRING_LITERAL;

/** simbolos no terminales **/


non terminal         Program, Main, Functions, Function ;
non terminal         Type ;

//Statements
non terminal List    StatementList;
non terminal         Statement;
non terminal         Declaration;

non terminal         expr;

precedence left PLUS;
precedence left MUL;


// Regla inicial

start with Program;

Program ::=     Main
              | Main Functions
              | Functions Main 
              | Functions Main Functions;

Functions ::=   Functions Function
              |  Function;

Main ::= INT MAIN LPAREN RPAREN LBRACE StatementList RBRACE;         

StatementList ::=      StatementList:s Statement:e    {: s.add(e); RESULT = s; :}
                     |                                {: RESULT = new LinkedList(); :};


Statement   ::= error DOLAR
              {:
                     System.err.println("Error de sintaxis. Recuperación en modo pánico activada.");
              :}
              | Declaration DOLAR;

Declaration::= Type:t IDENTIFIER:id
              {:
                     RESULT = new Declaration((Type)t, id.toString()); 

              :};

Type ::= INT         {: RESULT = new Type("int"); :}
       | FLOAT       {: RESULT = new Type("float"); :}
       | CHAR        {: RESULT = new Type("char"); :}
       | BOOL        {: RESULT = new Type("bool"); :};